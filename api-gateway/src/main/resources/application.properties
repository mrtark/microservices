spring.application.name=gateway
server.port=8763

#AlpK gateway\u015Fn aayakaland\u0131\u011F\u0131 porttan tm mikroservisleri servis edebilmesi iin:
eureka.instance.hostname=localhost

management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=*

### uygulamanin reactive (non-blocking) bir web uygulamasi olarak calismasini saglar.
### Bu, zellikle Spring WebFlux kullanildiginda gereklidir.
### Spring MVC kullanildiginda bu ayar kaldirilmalidir, ayrica Spring Cloud Gateway a\u015Fa\u011F\u0131dki 2 sat\u0131rla disable edilmedlidir
spring.main.web-application-type=reactive

### Asagidaki ayarlar Config Server ile ilgili bazi yapilandirmalari devredisi birakir
### ve bu nedenle konfigrasyonun dogru sekilde yuklenmis gibi gosterir hatali olsa da
#spring.cloud.config.import-check.enabled=false
#spring.cloud.config.enabled=false
#spring.cloud.gateway.discovery.locator.enabled=true

spring.config.import=optional:configserver:http://localhost:8762
spring.cloud.config.uri=http://localhost:8762
spring.profiles.active=default


### Gateway zerinden Mikroservislere Ynlendirme (Dinamik Ynlendirme Discovery Locator ile)
## Eureka Client Configuration
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
## Enable dynamic routing for discovered services; lower-case-service-id ayari ile mikroservis isimleri kk harfe evrilir (bu, isimlendirme tutarliligi iin faydali olabilir).
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true
## Gateway diger mikroservislerin health check endpoint'lerine erismeye calisacakk ve dinamik ynlendirme yapacak
spring.cloud.gateway.discovery.locator.health-check.enabled=true
spring.cloud.gateway.discovery.locator.health-check-path=/actuator/health

### Gateway zerinden Mikroservislere Ynlendirme (MANUEL):
#spring.cloud.gateway.routes[0].id = PRODUCT-SERVICE
#spring.cloud.gateway.routes[0].uri = lb://PRODUCT-SERVICE//
#spring.cloud.gateway.routes[0].predicates[0] = Path=/api/product/**
#spring.cloud.gateway.routes[1].id = SHOPPING-CART-SERVICE
#spring.cloud.gateway.routes[1].uri = lb://SHOPPING-CART-SERVICE//
#spring.cloud.gateway.routes[1].predicates[0] = Path=/api/shopping-cart/**

### Dinamik ynlendirme kullanildiginda bile bazen mikroservislerin dinamik olarak ynlendirilmesi iin asagidaki sekilde manuel bir rota eklemek gerekebilir.
spring.cloud.gateway.routes[0].id=PRODUCTSERVICE
spring.cloud.gateway.routes[0].uri=lb://PRODUCTSERVICE
#spring.cloud.gateway.routes[0].uri=http://localhost:8764
spring.cloud.gateway.routes[0].predicates[0]=Path=/productservice/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1


Spring.cloud.gateway.routes[1].id=USERSERVICE
spring.cloud.gateway.routes[1].uri=lb://USERSERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/user/**

Spring.cloud.gateway.routes[2].id=SHOPPINGCARD
spring.cloud.gateway.routes[2].uri=lb://SHOPPINGCARD
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/shopping-cart/**

logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.reactor.netty=DEBUG

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/SpringBootKeycloakProject